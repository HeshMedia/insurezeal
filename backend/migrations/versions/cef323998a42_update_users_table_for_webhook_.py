"""update_users_table_for_webhook_replication

Revision ID: cef323998a42
Revises: 5cba5bda15b0
Create Date: 2025-08-17 21:51:17.582488

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cef323998a42'
down_revision: Union[str, None] = '5cba5bda15b0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('is_sso_user', sa.Boolean(), server_default=sa.text('false'), nullable=False, comment='Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.'),
    sa.Column('is_anonymous', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('instance_id', sa.UUID(), nullable=True),
    sa.Column('aud', sa.String(length=255), nullable=True),
    sa.Column('role', sa.String(length=255), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('phone', sa.Text(), server_default=sa.text('NULL::character varying'), nullable=True),
    sa.Column('encrypted_password', sa.String(length=255), nullable=True),
    sa.Column('email_confirmed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('confirmation_token', sa.String(length=255), nullable=True),
    sa.Column('confirmation_sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('recovery_token', sa.String(length=255), nullable=True),
    sa.Column('recovery_sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('email_change_token_new', sa.String(length=255), nullable=True),
    sa.Column('email_change', sa.String(length=255), nullable=True),
    sa.Column('email_change_sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('email_change_token_current', sa.String(length=255), server_default=sa.text("''::character varying"), nullable=True),
    sa.Column('email_change_confirm_status', sa.SmallInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('phone_confirmed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('phone_change', sa.Text(), server_default=sa.text("''::character varying"), nullable=True),
    sa.Column('phone_change_token', sa.String(length=255), server_default=sa.text("''::character varying"), nullable=True),
    sa.Column('phone_change_sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_sign_in_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('invited_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('raw_app_meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('raw_user_meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_super_admin', sa.Boolean(), nullable=True),
    sa.Column('banned_until', sa.DateTime(timezone=True), nullable=True),
    sa.Column('reauthentication_token', sa.String(length=255), server_default=sa.text("''::character varying"), nullable=True),
    sa.Column('reauthentication_sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('confirmed_at', sa.DateTime(timezone=True), sa.Computed('LEAST(email_confirmed_at, phone_confirmed_at)', persisted=True), nullable=True),
    sa.CheckConstraint('email_change_confirm_status >= 0 AND email_change_confirm_status <= 2', name='users_email_change_confirm_status_check'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('phone', name='users_phone_key')
    )
    op.create_index('confirmation_token_idx', 'users', ['confirmation_token'], unique=True)
    op.create_index('email_change_token_current_idx', 'users', ['email_change_token_current'], unique=True)
    op.create_index('email_change_token_new_idx', 'users', ['email_change_token_new'], unique=True)
    op.create_index('reauthentication_token_idx', 'users', ['reauthentication_token'], unique=True)
    op.create_index('recovery_token_idx', 'users', ['recovery_token'], unique=True)
    op.create_index('users_email_partial_key', 'users', ['email'], unique=True)
    op.create_index('users_instance_id_email_idx', 'users', ['instance_id'], unique=False)
    op.create_index('users_instance_id_idx', 'users', ['instance_id'], unique=False)
    op.create_index('users_is_anonymous_idx', 'users', ['is_anonymous'], unique=False)
    op.drop_constraint('admin_child_ids_created_by_fkey', 'admin_child_ids', type_='foreignkey')
    op.create_foreign_key(None, 'admin_child_ids', 'users', ['created_by'], ['id'], ondelete='SET NULL')
    op.drop_constraint('child_id_requests_user_id_fkey', 'child_id_requests', type_='foreignkey')
    op.drop_constraint('child_id_requests_approved_by_fkey', 'child_id_requests', type_='foreignkey')
    op.create_foreign_key(None, 'child_id_requests', 'users', ['approved_by'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'child_id_requests', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('cut_pay_created_by_fkey', 'cut_pay', type_='foreignkey')
    op.create_foreign_key(None, 'cut_pay', 'users', ['created_by'], ['id'], ondelete='SET NULL')
    op.drop_constraint('cutpay_agent_configs_created_by_fkey', 'cutpay_agent_configs', type_='foreignkey')
    op.create_foreign_key(None, 'cutpay_agent_configs', 'users', ['created_by'], ['id'], ondelete='SET NULL')
    op.drop_constraint('reconciliation_reports_processed_by_fkey', 'reconciliation_reports', type_='foreignkey')
    op.create_foreign_key(None, 'reconciliation_reports', 'users', ['processed_by'], ['id'], ondelete='SET NULL')
    op.drop_constraint('user_documents_user_id_fkey', 'user_documents', type_='foreignkey')
    op.create_foreign_key(None, 'user_documents', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('user_profiles_user_id_fkey', 'user_profiles', type_='foreignkey')
    op.create_foreign_key(None, 'user_profiles', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'user_profiles', type_='foreignkey')
    op.create_foreign_key('user_profiles_user_id_fkey', 'user_profiles', 'users', ['user_id'], ['id'], referent_schema='auth', ondelete='CASCADE')
    op.drop_constraint(None, 'user_documents', type_='foreignkey')
    op.create_foreign_key('user_documents_user_id_fkey', 'user_documents', 'users', ['user_id'], ['id'], referent_schema='auth', ondelete='CASCADE')
    op.drop_constraint(None, 'reconciliation_reports', type_='foreignkey')
    op.create_foreign_key('reconciliation_reports_processed_by_fkey', 'reconciliation_reports', 'users', ['processed_by'], ['id'], referent_schema='auth', ondelete='SET NULL')
    op.drop_constraint(None, 'cutpay_agent_configs', type_='foreignkey')
    op.create_foreign_key('cutpay_agent_configs_created_by_fkey', 'cutpay_agent_configs', 'users', ['created_by'], ['id'], referent_schema='auth', ondelete='SET NULL')
    op.drop_constraint(None, 'cut_pay', type_='foreignkey')
    op.create_foreign_key('cut_pay_created_by_fkey', 'cut_pay', 'users', ['created_by'], ['id'], referent_schema='auth', ondelete='SET NULL')
    op.drop_constraint(None, 'child_id_requests', type_='foreignkey')
    op.drop_constraint(None, 'child_id_requests', type_='foreignkey')
    op.create_foreign_key('child_id_requests_approved_by_fkey', 'child_id_requests', 'users', ['approved_by'], ['id'], referent_schema='auth', ondelete='SET NULL')
    op.create_foreign_key('child_id_requests_user_id_fkey', 'child_id_requests', 'users', ['user_id'], ['id'], referent_schema='auth', ondelete='CASCADE')
    op.drop_constraint(None, 'admin_child_ids', type_='foreignkey')
    op.create_foreign_key('admin_child_ids_created_by_fkey', 'admin_child_ids', 'users', ['created_by'], ['id'], referent_schema='auth', ondelete='SET NULL')
    op.drop_index('users_is_anonymous_idx', table_name='users')
    op.drop_index('users_instance_id_idx', table_name='users')
    op.drop_index('users_instance_id_email_idx', table_name='users')
    op.drop_index('users_email_partial_key', table_name='users')
    op.drop_index('recovery_token_idx', table_name='users')
    op.drop_index('reauthentication_token_idx', table_name='users')
    op.drop_index('email_change_token_new_idx', table_name='users')
    op.drop_index('email_change_token_current_idx', table_name='users')
    op.drop_index('confirmation_token_idx', table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
