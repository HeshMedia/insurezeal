"""remove_financial_fields_from_user_profile

Revision ID: ed95261f0278
Revises: d34a5f3da3cf
Create Date: 2025-08-30 01:21:51.401060

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "ed95261f0278"
down_revision: Union[str, None] = "d34a5f3da3cf"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "is_sso_user",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
            comment="Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.",
        ),
        sa.Column(
            "is_anonymous",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column("instance_id", sa.UUID(), nullable=True),
        sa.Column("aud", sa.String(length=255), nullable=True),
        sa.Column("role", sa.String(length=255), nullable=True),
        sa.Column("email", sa.String(length=255), nullable=True),
        sa.Column(
            "phone",
            sa.Text(),
            server_default=sa.text("NULL::character varying"),
            nullable=True,
        ),
        sa.Column("encrypted_password", sa.String(length=255), nullable=True),
        sa.Column("email_confirmed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("confirmation_token", sa.String(length=255), nullable=True),
        sa.Column("confirmation_sent_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("recovery_token", sa.String(length=255), nullable=True),
        sa.Column("recovery_sent_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("email_change_token_new", sa.String(length=255), nullable=True),
        sa.Column("email_change", sa.String(length=255), nullable=True),
        sa.Column("email_change_sent_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "email_change_token_current",
            sa.String(length=255),
            server_default=sa.text("''::character varying"),
            nullable=True,
        ),
        sa.Column(
            "email_change_confirm_status",
            sa.SmallInteger(),
            server_default=sa.text("0"),
            nullable=True,
        ),
        sa.Column("phone_confirmed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "phone_change",
            sa.Text(),
            server_default=sa.text("''::character varying"),
            nullable=True,
        ),
        sa.Column(
            "phone_change_token",
            sa.String(length=255),
            server_default=sa.text("''::character varying"),
            nullable=True,
        ),
        sa.Column("phone_change_sent_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("last_sign_in_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("invited_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "raw_app_meta_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "raw_user_meta_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("is_super_admin", sa.Boolean(), nullable=True),
        sa.Column("banned_until", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "reauthentication_token",
            sa.String(length=255),
            server_default=sa.text("''::character varying"),
            nullable=True,
        ),
        sa.Column(
            "reauthentication_sent_at", sa.DateTime(timezone=True), nullable=True
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "confirmed_at",
            sa.DateTime(timezone=True),
            sa.Computed(
                "LEAST(email_confirmed_at, phone_confirmed_at)", persisted=True
            ),
            nullable=True,
        ),
        sa.CheckConstraint(
            "email_change_confirm_status >= 0 AND email_change_confirm_status <= 2",
            name="users_email_change_confirm_status_check",
        ),
        sa.PrimaryKeyConstraint("id", name="users_pkey"),
        sa.UniqueConstraint("phone", name="users_phone_key"),
    )
    op.create_index(
        "confirmation_token_idx", "users", ["confirmation_token"], unique=True
    )
    op.create_index(
        "email_change_token_current_idx",
        "users",
        ["email_change_token_current"],
        unique=True,
    )
    op.create_index(
        "email_change_token_new_idx", "users", ["email_change_token_new"], unique=True
    )
    op.create_index(
        "reauthentication_token_idx", "users", ["reauthentication_token"], unique=True
    )
    op.create_index("recovery_token_idx", "users", ["recovery_token"], unique=True)
    op.create_index("users_email_partial_key", "users", ["email"], unique=True)
    op.create_index(
        "users_instance_id_email_idx", "users", ["instance_id"], unique=False
    )
    op.create_index("users_instance_id_idx", "users", ["instance_id"], unique=False)
    op.create_index("users_is_anonymous_idx", "users", ["is_anonymous"], unique=False)
    op.drop_constraint(
        "admin_child_ids_created_by_fkey", "admin_child_ids", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "admin_child_ids", "users", ["created_by"], ["id"], ondelete="SET NULL"
    )
    op.drop_constraint(
        "child_id_requests_user_id_fkey", "child_id_requests", type_="foreignkey"
    )
    op.drop_constraint(
        "child_id_requests_approved_by_fkey", "child_id_requests", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "child_id_requests", "users", ["user_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None, "child_id_requests", "users", ["approved_by"], ["id"], ondelete="SET NULL"
    )
    op.add_column(
        "cut_pay", sa.Column("customer_documents_url", sa.Text(), nullable=True)
    )
    op.add_column(
        "cut_pay", sa.Column("vehicle_documents_url", sa.Text(), nullable=True)
    )
    op.add_column(
        "cut_pay", sa.Column("policy_documents_url", sa.Text(), nullable=True)
    )
    op.drop_constraint("cut_pay_created_by_fkey", "cut_pay", type_="foreignkey")
    op.drop_column("cut_pay", "discount_percent")
    op.drop_column("cut_pay", "total_receivable_from_broker_with_gst")
    op.drop_column("cut_pay", "cluster")
    op.drop_column("cut_pay", "extra_amount_receivable_from_broker")
    op.drop_column("cut_pay", "additional_documents")
    op.drop_column("cut_pay", "age_year")
    op.drop_column("cut_pay", "company")
    op.drop_column("cut_pay", "commissionable_premium")
    op.drop_column("cut_pay", "state")
    op.drop_column("cut_pay", "agent_payout_percent")
    op.drop_column("cut_pay", "cutpay_sheet_row_id")
    op.drop_column("cut_pay", "seating_capacity")
    op.drop_column("cut_pay", "agent_extra_percent")
    op.drop_column("cut_pay", "registration_number")
    op.drop_column("cut_pay", "net_premium")
    op.drop_column("cut_pay", "agent_extra_amount")
    op.drop_column("cut_pay", "product_insurer_report")
    op.drop_column("cut_pay", "fuel_type")
    op.drop_column("cut_pay", "created_by")
    op.drop_column("cut_pay", "running_bal")
    op.drop_column("cut_pay", "incoming_grid_percent")
    op.drop_column("cut_pay", "cutpay_received")
    op.drop_column("cut_pay", "payment_by_office")
    op.drop_column("cut_pay", "agent_payout_amount")
    op.drop_column("cut_pay", "po_diff_broker_amt")
    op.drop_column("cut_pay", "already_given_to_agent")
    op.drop_column("cut_pay", "payout_on")
    op.drop_column("cut_pay", "broker_name")
    op.drop_column("cut_pay", "iz_total_po_percent")
    op.drop_column("cut_pay", "cut_pay_amount")
    op.drop_column("cut_pay", "extra_grid")
    op.drop_column("cut_pay", "notes")
    op.drop_column("cut_pay", "agent_commission_given_percent")
    op.drop_column("cut_pay", "total_agent_po_amt")
    op.drop_column("cut_pay", "code_type")
    op.drop_column("cut_pay", "make_model")
    op.drop_column("cut_pay", "total_receivable_from_broker")
    op.drop_column("cut_pay", "synced_to_cutpay_sheet")
    op.drop_column("cut_pay", "business_type")
    op.drop_column("cut_pay", "gross_premium")
    op.drop_column("cut_pay", "gst_amount")
    op.drop_column("cut_pay", "broker_payout_amount")
    op.drop_column("cut_pay", "invoice_status")
    op.drop_column("cut_pay", "invoice_number")
    op.drop_column("cut_pay", "master_sheet_row_id")
    op.drop_column("cut_pay", "product_type")
    op.drop_column("cut_pay", "po_diff_broker_percent")
    op.drop_column("cut_pay", "rto")
    op.drop_column("cut_pay", "ncb")
    op.drop_column("cut_pay", "policy_pdf_url")
    op.drop_column("cut_pay", "cc")
    op.drop_column("cut_pay", "insurer_broker_code")
    op.drop_column("cut_pay", "plan_type")
    op.drop_column("cut_pay", "broker_po_percent")
    op.drop_column("cut_pay", "veh_wheels")
    op.drop_column("cut_pay", "payment_by")
    op.drop_column("cut_pay", "po_diff_agent_percent")
    op.drop_column("cut_pay", "od_premium")
    op.drop_column("cut_pay", "insurer_name")
    op.drop_column("cut_pay", "gvw")
    op.drop_column("cut_pay", "remarks")
    op.drop_column("cut_pay", "customer_phone_number")
    op.drop_column("cut_pay", "reporting_month")
    op.drop_column("cut_pay", "customer_name")
    op.drop_column("cut_pay", "receivable_from_broker")
    op.drop_column("cut_pay", "payment_method")
    op.drop_column("cut_pay", "po_diff_agent_amt")
    op.drop_column("cut_pay", "model")
    op.drop_column("cut_pay", "major_categorisation")
    op.drop_column("cut_pay", "claimed_by")
    op.drop_column("cut_pay", "tp_premium")
    op.drop_column("cut_pay", "agent_po_amt")
    op.drop_column("cut_pay", "vehicle_variant")
    op.drop_column("cut_pay", "formatted_policy_number")
    op.drop_column("cut_pay", "synced_to_master_sheet")
    op.drop_constraint(
        "cutpay_agent_configs_created_by_fkey",
        "cutpay_agent_configs",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None,
        "cutpay_agent_configs",
        "users",
        ["created_by"],
        ["id"],
        ondelete="SET NULL",
    )
    op.add_column(
        "policies", sa.Column("customer_documents_url", sa.Text(), nullable=True)
    )
    op.add_column(
        "policies", sa.Column("vehicle_documents_url", sa.Text(), nullable=True)
    )
    op.add_column(
        "policies", sa.Column("policy_documents_url", sa.Text(), nullable=True)
    )
    op.add_column("policies", sa.Column("booking_date", sa.Date(), nullable=True))
    op.add_column("policies", sa.Column("policy_start_date", sa.Date(), nullable=True))
    op.add_column("policies", sa.Column("policy_end_date", sa.Date(), nullable=True))
    op.drop_constraint("policies_agent_id_fkey", "policies", type_="foreignkey")
    op.drop_constraint("policies_uploaded_by_fkey", "policies", type_="foreignkey")
    op.drop_column("policies", "pdf_file_name")
    op.drop_column("policies", "end_date")
    op.drop_column("policies", "rto")
    op.drop_column("policies", "discount_percent")
    op.drop_column("policies", "ncb")
    op.drop_column("policies", "cluster")
    op.drop_column("policies", "age_year")
    op.drop_column("policies", "state")
    op.drop_column("policies", "cc")
    op.drop_column("policies", "manual_override")
    op.drop_column("policies", "seating_capacity")
    op.drop_column("policies", "agent_extra_percent")
    op.drop_column("policies", "start_date")
    op.drop_column("policies", "registration_number")
    op.drop_column("policies", "insurance_company")
    op.drop_column("policies", "net_premium")
    op.drop_column("policies", "plan_type")
    op.drop_column("policies", "product_insurer_report")
    op.drop_column("policies", "vehicle_type")
    op.drop_column("policies", "fuel_type")
    op.drop_column("policies", "running_bal")
    op.drop_column("policies", "veh_wheels")
    op.drop_column("policies", "payment_by")
    op.drop_column("policies", "payment_by_office")
    op.drop_column("policies", "od_premium")
    op.drop_column("policies", "ai_extracted_data")
    op.drop_column("policies", "broker_name")
    op.drop_column("policies", "gvw")
    op.drop_column("policies", "customer_phone_number")
    op.drop_column("policies", "notes")
    op.drop_column("policies", "agent_id")
    op.drop_column("policies", "customer_name")
    op.drop_column("policies", "gst")
    op.drop_column("policies", "ai_confidence_score")
    op.drop_column("policies", "agent_commission_given_percent")
    op.drop_column("policies", "code_type")
    op.drop_column("policies", "total_agent_payout_amount")
    op.drop_column("policies", "vehicle_segment")
    op.drop_column("policies", "make_model")
    op.drop_column("policies", "payment_method")
    op.drop_column("policies", "business_type")
    op.drop_column("policies", "model")
    op.drop_column("policies", "major_categorisation")
    op.drop_column("policies", "vehicle_class")
    op.drop_column("policies", "tp_premium")
    op.drop_column("policies", "gross_premium")
    op.drop_column("policies", "pdf_file_path")
    op.drop_column("policies", "vehicle_variant")
    op.drop_column("policies", "gst_amount")
    op.drop_column("policies", "invoice_number")
    op.drop_column("policies", "insurance_type")
    op.drop_column("policies", "policy_type")
    op.drop_column("policies", "uploaded_by")
    op.drop_column("policies", "formatted_policy_number")
    op.drop_column("policies", "product_type")
    op.drop_constraint(
        "reconciliation_reports_processed_by_fkey",
        "reconciliation_reports",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None,
        "reconciliation_reports",
        "users",
        ["processed_by"],
        ["id"],
        ondelete="SET NULL",
    )
    op.drop_constraint(
        "user_documents_user_id_fkey", "user_documents", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "user_documents", "users", ["user_id"], ["id"], ondelete="CASCADE"
    )
    op.drop_constraint(
        "user_profiles_user_id_fkey", "user_profiles", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "user_profiles", "users", ["user_id"], ["id"], ondelete="CASCADE"
    )
    op.drop_column("user_profiles", "total_net_premium")
    op.drop_column("user_profiles", "number_of_policies")
    op.drop_column("user_profiles", "running_balance")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "user_profiles",
        sa.Column(
            "running_balance",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "user_profiles",
        sa.Column(
            "number_of_policies", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "user_profiles",
        sa.Column(
            "total_net_premium",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(None, "user_profiles", type_="foreignkey")
    op.create_foreign_key(
        "user_profiles_user_id_fkey",
        "user_profiles",
        "users",
        ["user_id"],
        ["id"],
        referent_schema="auth",
        ondelete="CASCADE",
    )
    op.drop_constraint(None, "user_documents", type_="foreignkey")
    op.create_foreign_key(
        "user_documents_user_id_fkey",
        "user_documents",
        "users",
        ["user_id"],
        ["id"],
        referent_schema="auth",
        ondelete="CASCADE",
    )
    op.drop_constraint(None, "reconciliation_reports", type_="foreignkey")
    op.create_foreign_key(
        "reconciliation_reports_processed_by_fkey",
        "reconciliation_reports",
        "users",
        ["processed_by"],
        ["id"],
        referent_schema="auth",
        ondelete="SET NULL",
    )
    op.add_column(
        "policies",
        sa.Column(
            "product_type", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "formatted_policy_number",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column("uploaded_by", sa.UUID(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "policies",
        sa.Column(
            "policy_type", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "insurance_type", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "invoice_number", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "gst_amount",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "vehicle_variant", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "pdf_file_path", sa.VARCHAR(length=500), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "gross_premium",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "tp_premium",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "vehicle_class", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "major_categorisation",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column("model", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    )
    op.add_column(
        "policies",
        sa.Column(
            "business_type", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "payment_method", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "make_model", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "vehicle_segment", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "total_agent_payout_amount",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "code_type", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "agent_commission_given_percent",
            sa.NUMERIC(precision=5, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "ai_confidence_score",
            sa.NUMERIC(precision=3, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "gst", sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "customer_name", sa.VARCHAR(length=200), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "policies", sa.Column("agent_id", sa.UUID(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "policies", sa.Column("notes", sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "policies",
        sa.Column(
            "customer_phone_number",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "gvw", sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "broker_name", sa.VARCHAR(length=200), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "ai_extracted_data",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "od_premium",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "payment_by_office",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "payment_by", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "policies",
        sa.Column("veh_wheels", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "policies",
        sa.Column(
            "running_bal",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "fuel_type", sa.VARCHAR(length=20), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "vehicle_type", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "product_insurer_report",
            sa.VARCHAR(length=200),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "plan_type", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "net_premium",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "insurance_company",
            sa.VARCHAR(length=200),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column(
            "registration_number",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column("start_date", sa.DATE(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "policies",
        sa.Column(
            "agent_extra_percent",
            sa.NUMERIC(precision=5, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column("seating_capacity", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "policies",
        sa.Column("manual_override", sa.BOOLEAN(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "policies", sa.Column("cc", sa.INTEGER(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "policies",
        sa.Column("state", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    )
    op.add_column(
        "policies",
        sa.Column("age_year", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "policies",
        sa.Column("cluster", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    )
    op.add_column(
        "policies",
        sa.Column("ncb", sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    )
    op.add_column(
        "policies",
        sa.Column(
            "discount_percent",
            sa.NUMERIC(precision=5, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "policies",
        sa.Column("rto", sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    )
    op.add_column(
        "policies", sa.Column("end_date", sa.DATE(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "policies",
        sa.Column(
            "pdf_file_name", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
    )
    op.create_foreign_key(
        "policies_uploaded_by_fkey",
        "policies",
        "user_profiles",
        ["uploaded_by"],
        ["user_id"],
    )
    op.create_foreign_key(
        "policies_agent_id_fkey", "policies", "user_profiles", ["agent_id"], ["user_id"]
    )
    op.drop_column("policies", "policy_end_date")
    op.drop_column("policies", "policy_start_date")
    op.drop_column("policies", "booking_date")
    op.drop_column("policies", "policy_documents_url")
    op.drop_column("policies", "vehicle_documents_url")
    op.drop_column("policies", "customer_documents_url")
    op.drop_constraint(None, "cutpay_agent_configs", type_="foreignkey")
    op.create_foreign_key(
        "cutpay_agent_configs_created_by_fkey",
        "cutpay_agent_configs",
        "users",
        ["created_by"],
        ["id"],
        referent_schema="auth",
        ondelete="SET NULL",
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "synced_to_master_sheet", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "formatted_policy_number",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "vehicle_variant", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "agent_po_amt",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "tp_premium",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "claimed_by", sa.VARCHAR(length=200), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "major_categorisation",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column("model", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "po_diff_agent_amt",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "payment_method", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "receivable_from_broker",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "customer_name", sa.VARCHAR(length=200), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "reporting_month", sa.VARCHAR(length=10), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "customer_phone_number",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay", sa.Column("remarks", sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "gvw", sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "insurer_name", sa.VARCHAR(length=200), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "od_premium",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "po_diff_agent_percent",
            sa.NUMERIC(precision=5, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "payment_by", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column("veh_wheels", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "broker_po_percent",
            sa.NUMERIC(precision=5, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "plan_type", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "insurer_broker_code",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay", sa.Column("cc", sa.INTEGER(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "policy_pdf_url", sa.VARCHAR(length=500), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column("ncb", sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    )
    op.add_column(
        "cut_pay",
        sa.Column("rto", sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "po_diff_broker_percent",
            sa.NUMERIC(precision=5, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "product_type", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "master_sheet_row_id",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "invoice_number", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "invoice_status", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "broker_payout_amount",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "gst_amount",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "gross_premium",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "business_type", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "synced_to_cutpay_sheet", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "total_receivable_from_broker",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "make_model", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "code_type", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "total_agent_po_amt",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "agent_commission_given_percent",
            sa.NUMERIC(precision=5, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay", sa.Column("notes", sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "extra_grid",
            sa.NUMERIC(precision=5, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "cut_pay_amount",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "iz_total_po_percent",
            sa.NUMERIC(precision=5, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "broker_name", sa.VARCHAR(length=200), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "payout_on", sa.VARCHAR(length=20), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "already_given_to_agent",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "po_diff_broker_amt",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "agent_payout_amount",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "payment_by_office",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "cutpay_received",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "incoming_grid_percent",
            sa.NUMERIC(precision=5, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "running_bal",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column("created_by", sa.UUID(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "fuel_type", sa.VARCHAR(length=20), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "product_insurer_report",
            sa.VARCHAR(length=200),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "agent_extra_amount",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "net_premium",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "registration_number",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "agent_extra_percent",
            sa.NUMERIC(precision=5, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column("seating_capacity", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "cutpay_sheet_row_id",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "agent_payout_percent",
            sa.NUMERIC(precision=5, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column("state", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "commissionable_premium",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "company", sa.VARCHAR(length=200), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column("age_year", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "additional_documents",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "extra_amount_receivable_from_broker",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column("cluster", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "total_receivable_from_broker_with_gst",
            sa.NUMERIC(precision=15, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cut_pay",
        sa.Column(
            "discount_percent",
            sa.NUMERIC(precision=5, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.create_foreign_key(
        "cut_pay_created_by_fkey",
        "cut_pay",
        "users",
        ["created_by"],
        ["id"],
        referent_schema="auth",
        ondelete="SET NULL",
    )
    op.drop_column("cut_pay", "policy_documents_url")
    op.drop_column("cut_pay", "vehicle_documents_url")
    op.drop_column("cut_pay", "customer_documents_url")
    op.drop_constraint(None, "child_id_requests", type_="foreignkey")
    op.drop_constraint(None, "child_id_requests", type_="foreignkey")
    op.create_foreign_key(
        "child_id_requests_approved_by_fkey",
        "child_id_requests",
        "users",
        ["approved_by"],
        ["id"],
        referent_schema="auth",
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        "child_id_requests_user_id_fkey",
        "child_id_requests",
        "users",
        ["user_id"],
        ["id"],
        referent_schema="auth",
        ondelete="CASCADE",
    )
    op.drop_constraint(None, "admin_child_ids", type_="foreignkey")
    op.create_foreign_key(
        "admin_child_ids_created_by_fkey",
        "admin_child_ids",
        "users",
        ["created_by"],
        ["id"],
        referent_schema="auth",
        ondelete="SET NULL",
    )
    op.drop_index("users_is_anonymous_idx", table_name="users")
    op.drop_index("users_instance_id_idx", table_name="users")
    op.drop_index("users_instance_id_email_idx", table_name="users")
    op.drop_index("users_email_partial_key", table_name="users")
    op.drop_index("recovery_token_idx", table_name="users")
    op.drop_index("reauthentication_token_idx", table_name="users")
    op.drop_index("email_change_token_new_idx", table_name="users")
    op.drop_index("email_change_token_current_idx", table_name="users")
    op.drop_index("confirmation_token_idx", table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
